name: "Test and Build Flutter App"

# Trigger this workflow on push or pull request to main/master branches
on:
  push:
    branches: ["**"]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Test and Build
    runs-on: ubuntu-latest  # The job runs on the latest Ubuntu virtual machine

    steps:
      # Step 1: Checkout the project repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Load environment variables from .github/env.sh
      # This makes it easy to configure versions or flags without editing this file
      - name: Load Environment Variables
        run: |
          source .github/env.sh

      # Step 3: Set up Java (required by Flutter and some build tools)
      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'  # Temurin is a fast, open-source JDK distribution
          java-version: 17

      # Step 4: Set up Flutter SDK
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}

      # Step 5: Install Dart/Flutter dependencies
      - name: Install Dependencies
        run: flutter pub get

      - name: Run Flutter Tests with Coverage and Machine Output
        run: |
          mkdir -p test-results
          flutter test --coverage --machine > test-results/results.json || true
          cat test-results/results.json  # Debugging: Output test results

      # Step 3: Convert Flutter test results to JUnit format
      - name: Convert to JUnit format
        run: |
          cat test-results/results.json | flutter pub run junitreport:tojunit > test-results/test-report.xml || true
          cat test-results/test-report.xml  # Debugging: Output JUnit test report

      - name: Convert JUnit XML to HTML
        uses: pl-strflt/junit-xml-to-html@v1
        with:
          mode: 'no-frames'
          input: 'test-results/test-report.xml'
          output: 'test-results/test-report.html'

      # Step 4: Analyze test results and allow minor failures
      - name: Analyze Test Results and Allow Minor Failures
        run: dart run tool/run_filtered_tests.dart

      # Step 7: Upload test report as an artifact (you can download it from GitHub UI)
      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: Flutter-Test-Report
          path: test-results/test-report.html

      # Step 8: Run Tests with Coverage
      - name: Run Flutter Tests with Coverage
        run: flutter test --coverage --machine > test-results/results.json || true

      # Step 9: Install LCOV (HTML report generator)
      - name: Install LCOV
        run: sudo apt-get install -y lcov

      # Step 10: Generate Beautiful HTML Coverage Report
      - name: Generate HTML Coverage Report
        run: |
          mkdir -p coverage_report
          genhtml coverage/lcov.info \
            --output-directory coverage_report \
            --title "Flutter Test Coverage" \
            --show-details \
            --highlight \
            --legend

      # Step 11: Upload HTML Coverage Report as Artifact
      - name: Upload HTML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: Flutter-Coverage-Report
          path: coverage_report/


      # Step 12: Check if code coverage meets the threshold defined in env.sh
      - name: Check Coverage Threshold
        run: |
          total_coverage=$(lcov --summary coverage/lcov.info | grep -Po 'lines\.*: \K[0-9.]+(?=%)')
          echo "Total Coverage: $total_coverage%"
          result=$(echo "$total_coverage < $COVERAGE_THRESHOLD" | bc -l)
          if [ "$result" -eq 1 ]; then
            echo "Code coverage ($total_coverage%) is below threshold ($COVERAGE_THRESHOLD%)."
            exit 1 
          else
            echo "Code coverage ($total_coverage%) meets the threshold." 
          fi

      # Step 13: Debug LCOV output (optional, can be removed in production)
      - name: Debug LCOV Output
        run: |
          ls -la coverage
          head coverage/lcov.info

      # Step 14: Check if code coverage report is available or not
      - name: Ensure Coverage Report is Ready
        run: |
          if [ ! -f coverage/lcov.info ]; then
            echo "lcov.info not found! Did coverage generation fail?"
            exit 1
          fi

      - name: Confirm lcov.info is populated
        run: |
          echo "Preview of lcov.info:"
          head -n 20 coverage/lcov.info
          echo "Size: $(du -h coverage/lcov.info)"


      # Step 15: Run SonarQube scan for code coverage analysis
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Step 16: Run Snyk scan for code quality analysis
#      - name: Run Snyk to check for vulnerabilities
#        uses: snyk/actions/cli@v1
#        with:
#          command: test
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Step 17: Build Android APK for testing or release (split per ABI for smaller size)
      - name: Build Debug APK
        run: flutter build apk --split-per-abi

      # Step 18: Optional iOS build (only runs if BUILD_IOS=true in env.sh, and only works on macOS)
      - name: Build iOS App
        if: ${{ env.BUILD_IOS == 'true' }}
        run: flutter build ios --no-codesign
