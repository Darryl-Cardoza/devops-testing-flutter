name: "Test and Build Flutter App"

# Trigger the workflow on any push or PR to main/master
on:
  push:
    branches: ["**"]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Test and Build
    runs-on: ubuntu-latest  # Run the job on the latest Ubuntu VM

    steps:
      # Step 1: Checkout the project code from the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Load environment variables from a script for centralized config
      - name: Load Environment Variables
        run: |
          source .github/env.sh

      # Step 3: Set up Java, needed for Flutter and Android builds
      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      # Step 4: Set up Flutter SDK using variables from env.sh
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ vars.FLUTTER_VERSION }}
          channel: ${{ vars.FLUTTER_CHANNEL }}

      # Step 5: Install all project dependencies
      - name: Install Dependencies
        run: flutter pub get

      # Step 6: Run Flutter tests with coverage and output in machine-readable JSON
      - name: Run Flutter Tests with Coverage and Machine Output
        run: |
          mkdir -p test-results
          flutter test --coverage --machine > test-results/results.json || true
          cat test-results/results.json 

      # Step 7: Convert test results to JUnit XML for easier reporting
      - name: Convert to JUnit format
        run: |
          cat test-results/results.json | flutter pub run junitreport:tojunit > test-results/test-report.xml || true
          cat test-results/test-report.xml  

      # Step 8: Convert JUnit XML to HTML for human-readable test report
      - name: Convert JUnit XML to HTML
        uses: pl-strflt/junit-xml-to-html@v1
        with:
          mode: 'no-frames'
          input: 'test-results/test-report.xml'
          output: 'test-results/test-report.html'

      # Step 9: Run custom test result filter (optional tool to allow some test failures)
      - name: Analyze Test Results and Allow Minor Failures
        run: dart run tool/run_filtered_tests.dart

      # Step 10: Upload test report for review in the GitHub UI
      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: Flutter-Test-Report
          path: test-results/test-report.html

      # Step 11: Run tests again (if needed) with coverage
      - name: Run Flutter Tests with Coverage
        run: flutter test --coverage --machine > test-results/results.json || true

      # Step 12: Install LCOV for generating HTML coverage reports
      - name: Install LCOV
        run: sudo apt-get install -y lcov

      # Step 13: Generate HTML report from LCOV coverage data
      - name: Generate HTML Coverage Report
        run: |
          mkdir -p coverage_report
          genhtml coverage/lcov.info \
            --output-directory coverage_report \
            --title "Flutter Test Coverage" \
            --show-details \
            --highlight \
            --legend

      # Step 14: Upload the HTML coverage report to GitHub
      - name: Upload HTML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: Flutter-Coverage-Report
          path: coverage_report/

      # Step 15: Check if coverage meets the required threshold
      - name: Check Coverage Threshold
        run: |
          total_coverage=$(lcov --summary coverage/lcov.info | grep -Po 'lines\.*: \K[0-9.]+(?=%)')
          echo "Total Coverage: $total_coverage%"
          result=$(echo "$total_coverage < $COVERAGE_THRESHOLD" | bc -l)
          if [ "$result" -eq 1 ]; then
            echo "Code coverage ($total_coverage%) is below threshold ($COVERAGE_THRESHOLD%)."
            exit 1 
          else
            echo "Code coverage ($total_coverage%) meets the threshold." 
          fi

      # Step 16: Optional debug info for LCOV output (useful for troubleshooting)
      - name: Debug LCOV Output
        run: |
          ls -la coverage
          head coverage/lcov.info

      # Step 17: Ensure coverage report was actually created
      - name: Ensure Coverage Report is Ready
        run: |
          if [ ! -f coverage/lcov.info ]; then
            echo "lcov.info not found! Did coverage generation fail?"
            exit 1
          fi

      # Step 18: Confirm LCOV file is not empty
      - name: Confirm lcov.info is populated
        run: |
          echo "Preview of lcov.info:"
          head -n 20 coverage/lcov.info
          echo "Size: $(du -h coverage/lcov.info)"

      # Step 19: Run SonarQube analysis for static code analysis and coverage
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Step 20: Optionally run Codacy for security analysis (commented out for now)
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        with:
          output: results.sarif
          format: sarif
          gh-code-scanning-compat: true
          max-allowed-issues: 2147483647
          arguments: analyze -r lib test --skip=trivy,checkstyle,cyclonedx,markdownlint

#      - name: Upload SARIF results file
#        uses: github/codeql-action/upload-sarif@main
#        with:
#          sarif_file: results.sarif

      # Step 21: Build Android APK with ABI splits (for smaller binaries)
      - name: Build Debug APK
        run: flutter build apk --split-per-abi

      # Step 22: Conditionally build iOS app (only on macOS runners if enabled in env)
      - name: Build iOS App
        if: ${{ vars.BUILD_IOS == 'true' }}
        run: flutter build ios --no-codesign
