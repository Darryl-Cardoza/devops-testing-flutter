name: "Test and Build Flutter App"

on:
  push:
    branches: ["**"]
  pull_request:
    branches: [main, master]

jobs:
  build:
    name: Test and Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Environment Variables
        run: |
          source .github/env.sh

      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ vars.FLUTTER_VERSION }}
          channel: ${{ vars.FLUTTER_CHANNEL }}

      - name: Install Dependencies
        run: flutter pub get

      - name: Run Flutter Tests with Coverage and Machine Output
        run: |
          mkdir -p test-results
          flutter test --coverage --machine > test-results/results.json || true
          cat test-results/results.json

      - name: Convert to JUnit format
        run: |
          cat test-results/results.json | flutter pub run junitreport:tojunit > test-results/test-report.xml || true
          cat test-results/test-report.xml  

      - name: Convert JUnit XML to HTML
        uses: pl-strflt/junit-xml-to-html@v1
        with:
          mode: 'no-frames'
          input: 'test-results/test-report.xml'
          output: 'test-results/test-report.html'

      - name: Analyze Test Results and Allow Minor Failures
        run: dart run tool/run_filtered_tests.dart

      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: Flutter-Test-Report
          path: test-results/test-report.html

      - name: Run Flutter Tests with Coverage
        run: flutter test --coverage --machine > test-results/results.json || true

      - name: Install LCOV
        run: sudo apt-get install -y lcov

      - name: Generate HTML Coverage Report
        run: |
          mkdir -p coverage_report
          genhtml coverage/lcov.info \
            --output-directory coverage_report \
            --title "Flutter Test Coverage" \
            --show-details \
            --highlight \
            --legend

      - name: Upload HTML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: Flutter-Coverage-Report
          path: coverage_report/

      - name: Check Coverage Threshold
        run: |
          total_coverage=$(lcov --summary coverage/lcov.info | grep -Po 'lines\.*: \K[0-9.]+(?=%)')
          echo "Total Coverage: $total_coverage%"
          result=$(echo "$total_coverage < $COVERAGE_THRESHOLD" | bc -l)
          if [ "$result" -eq 1 ]; then
            echo "Code coverage ($total_coverage%) is below threshold ($COVERAGE_THRESHOLD%)."
            exit 1 
          else
            echo "Code coverage ($total_coverage%) meets the threshold." 
          fi

      - name: Debug LCOV Output
        run: |
          ls -la coverage
          head coverage/lcov.info

      - name: Ensure Coverage Report is Ready
        run: |
          if [ ! -f coverage/lcov.info ]; then
            echo "lcov.info not found! Did coverage generation fail?"
            exit 1
          fi

      - name: Confirm lcov.info is Populated
        run: |
          echo "Preview of lcov.info:"
          head -n 20 coverage/lcov.info
          echo "Size: $(du -h coverage/lcov.info)"

      - name: Build Debug APK
        run: flutter build apk --split-per-abi

      - name: Build iOS App
        if: ${{ vars.BUILD_IOS == 'true' }}
        run: flutter build ios --no-codesign

  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  codacy:
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          gh-code-scanning-compat: true
          max-allowed-issues: 2147483647
          arguments: >
            --exclude-tool pmd
            --exclude-tool pmd-legacy
            --exclude-tool checkstyle
            --exclude-tool eslint
            --exclude-tool clang-tidy
            --exclude-tool metrics

      - name: Generate HTML Report (Optional)
        run: |
          codacy-analysis-cli analyze \
            --project-token ${{ secrets.CODACY_PROJECT_TOKEN }} \
            --output results.html \
            --format html || echo "HTML format not supported"

      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: Codacy-HTML-Report
          path: results.html
